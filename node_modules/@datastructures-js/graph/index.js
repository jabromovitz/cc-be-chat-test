/**
 * datastructures-js/graph
 * @copyright 2018 Eyas Ranjous <eyas.ranjous@gmail.com>
 * @license MIT
 */
const shortestPath = require('./shortest-path');
const traverse = require('./traverse');

/**
 * graph vertex
 * @function
 */
const vertex = (k, v) => {
  const key = k;
  let value = v;

  /**
   * @returns {(string|number)}
   */
  const getKey = () => key;

  /**
   * @param {object} val
   */
  const setValue = (val) => {
    value = val;
  };

  /**
   * @returns {object}
   */
  const getValue = () => value;

  // vertex api
  return {
    getKey,
    setValue,
    getValue
  };
};

/**
 * graph & directed graph
 * @function
 */
const graph = (options) => {
  let vertices = {};
  let edges = {};
  let verticesCount = 0;
  const { directed } = (options && options) || false;
  const self = {};
  const dfs = dfsFn(self);

  /**
   * add a vertex to the graph
   * @param {(string|number)} key
   * @param {object} value
   */
  const addVertex = (key, value) => {
    if (!vertices[key]) {
      vertices[key] = vertex(key, value);
      edges[key] = {};
      verticesCount += 1;
    }
  };

  /**
   * removes a vertex from the graph
   * @param {(string|number} key
   */
  const removeVertex = (key) => {
    if (vertices[key]) {
      vertices[key] = undefined;
      verticesCount -= 1;
    }
  };

  /**
   * checks if the graph has a vertex
   * @param {(string|number)} key
   * @returns {boolean}
   */
  const hasVertex = key => !!vertices[key];

  /**
   * gets the count of the vertices in the graph
   * @returns {number}
   */
  const countVertices = () => verticesCount;

  /**
   * adds an edge between two existing vertices
   * @param {(string|number)} key1 - first vertext key
   * @param {(string|number)} key2 - second vertex key
   * @param {number} the numeric weight of the edge
   */
  const addEdge = (key1, key2, weight) => {
    if (hasVertex(key1) && hasVertex(key2)) {
      const w = +weight || 0;
      edges[key1][key2] = w;
      if (!directed) {
        edges[key2][key1] = w;
      }
    }
  };

  /**
   * checks if the graph has an edge between two existing vertices
   * @param {(string|number)} key1
   * @param {(string|number)} key2
   * @returns {boolean}
   */
  const hasEdge = (key1, key2) => {
    if (hasVertex(key1) && hasVertex(key2)) {
      if (directed && edges[key1][key2] >= 0) {
        return true;
      } else if (edges[key1][key2] >= 0 && edges[key2][key1] >= 0) {
        return true;
      }
    }
    return false;
  };

  /**
   * checks if the graph has edges from a vertex
   * @param {(string|number)} key
   * @returns {boolean}
   */
  const hasEdges = (key) => {

  };

  /**
   * gets the weight of the edge between two vertices
   * @returns {number|null}
   */
  const getWeight = (key1, key2) => {
    if (hasVertex(key1) && key1 === key2) {
      return 0;
    } else if (hasEdge(key1, key2)) {
      return edges[key1][key2];
    }
    return null;
  };

  /**
   * removes an existing edge between two vertices
   * @param {(string|number)} key1
   * @param {(string|number)} key2
   */
  const removeEdge = (key1, key2) => {
    if (hasEdge(key1, key2)) {
      edges[key1][key2] = -1;
      edges[key2][key1] = -1;
    }
  };

  /**
   * traverse the graph using using a traversal algorithm
   * @param {(string|number)} key - starting vertex key
   * @param {function} cb - called with each vertex value
   * @param {string} - traversal type, default is bfs
   */
  const traverse = (key, cb, type) => {
    const trv = traverse[type] || traverse.bfs;
    return trv(self)(key, cb);
  };

  /**
   * finds all the shortest paths between two vertices in the graph
   * @param {(string|number)} key1 - source vertex key
   * @param {(string|number)} key2 - destination vertex key
   * @param {string} type - algorithm name - default is dfs
   * @returns {array}
   */
  const findShortestPath = (key1, key2, type) => {
    const algFn = shortestPath[type] || shortestPath.dfs;
    return algFn(self)(key1, key2);
  };

  /**
   * clears the graph
   */
  const clear = () => {
    vertices = {};
    edges = {};
    verticesCount = 0;
  };

  // graph api
  return {
    addVertex,
    removeVertex,
    hasVertex,
    countVertices,
    addEdge,
    hasEdge,
    hasEdges,
    removeEdge,
    getWeight,
    traverse,
    findShortestPath,
    clear
  };
};

module.exports = graph;
